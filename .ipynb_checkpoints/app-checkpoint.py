{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5e90b0d7-67a8-48e6-b66f-32fd9e15f797",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     /Users/2825996/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n",
      "[nltk_data] Downloading package wordnet to /Users/2825996/nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n",
      "2024-10-03 11:59:21.447 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-10-03 11:59:21.876 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run /Users/2825996/Library/Python/3.9/lib/python/site-packages/ipykernel_launcher.py [ARGUMENTS]\n",
      "2024-10-03 11:59:21.877 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-10-03 11:59:21.877 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-10-03 11:59:21.877 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-10-03 11:59:21.877 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-10-03 11:59:21.878 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-10-03 11:59:21.878 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-10-03 11:59:21.878 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-10-03 11:59:21.879 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-10-03 11:59:21.879 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-10-03 11:59:21.879 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score, classification_report, roc_curve, auc, ConfusionMatrixDisplay\n",
    "import nltk\n",
    "import re\n",
    "from wordcloud import WordCloud\n",
    "\n",
    "# Set execution_count to None as per your request\n",
    "execution_count = None\n",
    "\n",
    "# Download NLTK data\n",
    "nltk.download('stopwords')\n",
    "nltk.download('wordnet')\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "\n",
    "# Preprocessing function\n",
    "def preprocess(text):\n",
    "    stop_words = set(stopwords.words('english'))\n",
    "    lemmatizer = WordNetLemmatizer()\n",
    "    text = re.sub(r'<.*?>', '', text)\n",
    "    text = re.sub(r'[^a-zA-Z]', ' ', text)\n",
    "    text = text.lower()\n",
    "    words = text.split()\n",
    "    words = [lemmatizer.lemmatize(word) for word in words if word not in stop_words]\n",
    "    return ' '.join(words)\n",
    "\n",
    "# Load dataset\n",
    "st.title(\"IMDB Sentiment Analysis App\")\n",
    "st.write(\"### Load and preprocess the IMDB dataset\")\n",
    "\n",
    "uploaded_file = st.file_uploader(\"Choose a CSV file\", type=\"csv\")\n",
    "if uploaded_file is not None:\n",
    "    df = pd.read_csv(uploaded_file)\n",
    "    \n",
    "    # Preprocess the data\n",
    "    df['cleaned_review'] = df['review'].apply(preprocess)\n",
    "    st.write(\"Dataset Head:\")\n",
    "    st.dataframe(df.head())\n",
    "\n",
    "    # Display distribution of sentiments\n",
    "    st.write(\"### Distribution of Sentiments\")\n",
    "    df['sentiment'].value_counts().plot(kind='bar', color=['green', 'red'])\n",
    "    plt.title(\"Distribution of Sentiments\")\n",
    "    st.pyplot(plt.gcf())\n",
    "\n",
    "    # Split data\n",
    "    st.write(\"### Train a Sentiment Analysis Model\")\n",
    "    X = df['cleaned_review']\n",
    "    y = df['sentiment'].map({'positive': 1, 'negative': 0})\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "    # TF-IDF Vectorization\n",
    "    tfidf_vectorizer = TfidfVectorizer(max_features=5000)\n",
    "    X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)\n",
    "    X_test_tfidf = tfidf_vectorizer.transform(X_test)\n",
    "\n",
    "    # Train the model\n",
    "    model = LogisticRegression(max_iter=1000)\n",
    "    model.fit(X_train_tfidf, y_train)\n",
    "\n",
    "    # Make predictions and display accuracy\n",
    "    y_pred = model.predict(X_test_tfidf)\n",
    "    acc = accuracy_score(y_test, y_pred)\n",
    "    st.write(f\"Model Accuracy: {acc * 100:.2f}%\")\n",
    "\n",
    "    # Classification report\n",
    "    st.write(\"### Classification Report\")\n",
    "    st.text(classification_report(y_test, y_pred, target_names=['Negative', 'Positive']))\n",
    "\n",
    "    # Plot ROC curve\n",
    "    st.write(\"### ROC Curve\")\n",
    "    y_proba = model.predict_proba(X_test_tfidf)[:, 1]\n",
    "    fpr, tpr, _ = roc_curve(y_test, y_proba)\n",
    "    roc_auc = auc(fpr, tpr)\n",
    "    plt.plot(fpr, tpr, label=f'AUC = {roc_auc:.2f}')\n",
    "    plt.plot([0, 1], [0, 1], 'r--')\n",
    "    plt.title(\"ROC Curve\")\n",
    "    plt.xlabel(\"False Positive Rate\")\n",
    "    plt.ylabel(\"True Positive Rate\")\n",
    "    plt.legend(loc=\"lower right\")\n",
    "    st.pyplot(plt.gcf())\n",
    "\n",
    "    # Confusion Matrix\n",
    "    st.write(\"### Confusion Matrix\")\n",
    "    ConfusionMatrixDisplay.from_estimator(model, X_test_tfidf, y_test, display_labels=['Negative', 'Positive'])\n",
    "    st.pyplot(plt.gcf())\n",
    "\n",
    "    # Generate Word Clouds\n",
    "    st.write(\"### Word Clouds for Positive and Negative Reviews\")\n",
    "    positive_reviews = df[df['sentiment'] == 'positive']['cleaned_review'].str.cat(sep=' ')\n",
    "    negative_reviews = df[df['sentiment'] == 'negative']['cleaned_review'].str.cat(sep=' ')\n",
    "    \n",
    "    wordcloud_pos = WordCloud(width=800, height=400, background_color='white').generate(positive_reviews)\n",
    "    wordcloud_neg = WordCloud(width=800, height=400, background_color='black').generate(negative_reviews)\n",
    "    \n",
    "    st.write(\"Word Cloud for Positive Reviews\")\n",
    "    plt.imshow(wordcloud_pos, interpolation='bilinear')\n",
    "    plt.axis('off')\n",
    "    st.pyplot(plt.gcf())\n",
    "    \n",
    "    st.write(\"Word Cloud for Negative Reviews\")\n",
    "    plt.imshow(wordcloud_neg, interpolation='bilinear')\n",
    "    plt.axis('off')\n",
    "    st.pyplot(plt.gcf())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "91ead9d7-2124-4a90-b7ad-4dae71657c2d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
